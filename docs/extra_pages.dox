/** \mainpage
 *
 * **Polycap** is a library for C with Python bindings that allows for the simulation of X-ray photons in poly- and monocapillary optics with multi-core processing abilities.
 * This code allows for the study of the influence of the capillary shape, its deviations, surface roughness, reflector material, X-ray energy, source size, distance and divergence on
 * the optic's efficiency, working distance and focal spot size.
 *
 * For each simulated photon, characterized by a three dimensional position, direction and electric field vector, the transmission efficiency through the optic is calculated
 * as a result of a series of reflections within the capillary optic. Additionally, each transmitted photon is characterized by its exit coordinate, direction and electric field vector
 * as well as traveled photon path length within the polycapillary optic. These parameters are saved in an HDF5 output file.
 *
 * At each photon - capillary wall interaction the reflectivity is determined by the Fresnel equation:
 * \f[
	R_{f}(\theta,E) = \left| 
		\frac{\theta - \sqrt{\theta^{2} - 2\delta(E)}}{\theta + \sqrt{\theta^{2} - 2\delta(E)}}
		\right|^{2}
   \f]
 * with \f$\theta\f$ the glancing angle of the incident radiation and  \f$\delta\f$ defined as \f$\delta = \alpha - i\beta\f$ with
 *\f[
	\alpha = \left(\frac{hc}{E}\right)^{2}
		\frac{N_{A}r_{0}\rho}{2\pi}
		\sum\limits_{j=1}^N \frac{w_{j}}{A_{j}} (Z_{j} + f_{j}^{'})
	\\
	\beta = \left(\frac{hc}{E}\right)^{2}
		\frac{N_{A}r_{0}\rho}{2\pi}
		\sum\limits_{j=1}^N \frac{w_{j}}{A_{j}} f_{j}^{"} = \frac{hc}{4\pi} \frac{\mu_{L}}{E}
  \f]
 * Here \f$h\f$ is Planck's constant, \f$c\f$ the light velocity, \f$E\f$ the photon energy, \f$N_{A}\f$ Avogadro's number, \f$r_{0}\f$ the classical electron radius, \f$\rho\f$ the material density, \f$N\f$ the number of elements with weight fraction \f$w_{j}\f$, \f$A_{j}\f$ the atomic weight, \f$Z_{j}\f$ the atomic number and \f$f_{j}\f$ the atomic scattering for element \f$j\f$ and \f$\mu_{L}\f$ the linear attenuation coefficient.
 * By propagating the photon through the capillary and determining the reflectivity at each point a final transmission efficiency, exit coordinate and direction is obtained.
 * This process can then be repeated for multiple photons as a means to simulate an X-ray source with known distance, size and divergence propagating through the capillary optic.
 *
 * \authors Pieter Tack, Tom Schoonjans, Laszlo Vincze
 *
 * \page installation_instructions Installation instructions
 *  
 * \section requirements Requirements
 * \subsection xraylib xraylib
 * **Polycap** makes use of **xraylib** to obtain values for the linear attenuation coefficient, as well as atomic scattering factors for the elements in the capillary matrix.
 * **xraylib** provides access to some of the most respected databases of physical data in the field of X-rays.
 * The core of **xraylib** is a library, written in ANSI C, containing over 40 functions to be used to retrieve data from these databases.
 * This C library can be directly linked with any program written in C, C++ or Objective-C.
 * Furthermore, the **xraylib** package contains bindings to several popular programming languages: Fortran 2003, Perl, Python, Java, IDL, Lua, Ruby, PHP and .NET,
 * as well as a command-line utility which can be used as a pocket-calculator. See [The xraylib library for X-rayâ€”matter interactions. Recent developments](https://www.sciencedirect.com/science/article/pii/S0584854711001984).
 *
 * Information on obtaining and installing can be found [in the official documentation](https://github.com/tschoonj/xraylib/wiki/Installation-instructions).
 * 
 * \subsection hdf5 HDF5
 * The **HDF5** library is used by **polycap** to save all output information in a single, structured and compact file. This software library runs on a range of computational platforms, from laptops to massively parallel systems, and implements a high-level API with C, C++, Fortran 90, and Java interfaces.
 * It contains a rich set of integrated performance features that allow for access time and storage space optimizations as well as tools and applications for managing, manipulating, viewing, and analyzing the data in the collection.
 *
 * The **HDF5** source code can be downloaded from [this](https://support.hdfgroup.org/HDF5/release/obtainsrc.html#conf) source. However, it should be available using most package managers (apt, yum, dnf, Homebrew, MacPorts, MSYS2 etc).
 * 
 * \subsection openMP OpenMP
 * The **Polycap** code make use of **OpenMP** for its multi-core processing capabilities.
 * As such, the compiler used to compile the **Polycap** code must implement **OpenMP** functionality. Check the [OpenMP.org](https://www.openmp.org/resources/openmp-compilers-tools/) website for a complete list of compilers implementing **OpenMP**.
 *
 * It is strongly advised to use the [GNU GCC](https://gcc.gnu.org/install/) compiler to compile **Polycap**.
 * 
 * \subsection gsl GNU Scientific Library
 * TODO
 *
 *
 * \subsection easyrng easyRNG
 * **Polycap** uses **easyRNG**'s random number generators when present at compilation time. If not, it will make use of the GNU Scientific Library for this purpose.
 * **easyRNG** is a simple library for C and Fortran providing access to several pseudo-random
 * number generators and pseudo-random number distributions.
 *
 * It doesn't include any implementations of generators or distributions, but is instead a thin wrapper
 * around the \c random templates of the C++ Standard Library that have been defined in the 2011 revision of the C++ standard.
 *
 * The API is modelled after the [GNU Scientific Library (GSL)](https://www.gnu.org/software/gsl/manual/html_node/index.html), and its Fortran bindings [FGSL](http://www.lrz.de/services/software/mathematik/gsl/fortran/).
 * Preliminary tests suggest that easyRNG's performance of its Mersenne Twister random number generators is only slightly worse than its GSL counterparts, but this stronly depends on which implementation of the C++ Standard Library was used.
 * 
 * The main reason to use this library over GSL or FGSL is its license. While GSL and FGSL are covered by the GNU General Public License version 3, easyRNG is available under the 3-clause BSD license, allowing for use in closed-source/commercial software packages.
 *
 * The source code release tarballs are hosted on the Github repository, in the [releases section](https://github.com/tschoonj/easyRNG/releases).
 *
 * \subsection python Python bindings
 * **Polycap** ships with support for Python. In order to generate these at build time, you will need a complete installation of Python, including the headers, as well as Cython and Numpy. These should be easy to install with any package manager. We support both Python 2.7 and 3.x
 *
 * \section downloading4 Downloading the Polycap Software
 * 
 * TODO
 *
 * \subsection head Github repository
 *                                                                                                                    
 * People interested in running the latest development version will have to clone the Github repository.             
 * Make sure you have the above mentioned dependencies installed, as well as the GNU autotools (autoconf, automake and libtool).
 *
 *       git clone git@github.com:PieterTack/polycap.git                                                             
 *       cd polycap
 *       autoreconf -i
 *       ./configure
 *       make
 *       make check
 *       make install
 *
 * \page usage Usage
 * 
 * \section c_usage From C/C++/Objective-C
 *
 * Include the polycap header in your code:
 * \code
 * #include <polycap.h>
 * \endcode
 *
 * Assuming your program source file is called \c program.c, compile it with:
 * \code
 * gcc program.c -o program `pkg-config --cflags --libs libpolycap`
 * \endcode
 *
 * \section python_usage From Python
 *
 * Import the polycap module in your code:
 * \code{.py}
 * import polycap
 * \endcode
 *
 * \page pyth_docs Python Docs
 * 
 * \section Profile Profile
 * Class containing information about a polycapillary profile shape.
 * When this class is no longer required, it is the user's responsability to free the memory using ``Profile.__dealloc__``.
 * 
 * Create a new profile for a given profile type with supplied polycapillary properties.
 * Syntax: profile = Profile(polycap_profile_type type, double length, double rad_ext_upstream, double rad_ext_downstream, double rad_int_upstream, double rad_int_downstream, double focal_dist_upstream, double focal_dist_downstream)
 *       - **type:** an integer or \ref profiletype that indicates the profile type
 *       - **length:** the polycapillary length, as measured along the central axis [cm]
 *       - **rad_ext_upstream:** external upstream polycapillary radius (photons stream from upstream to downstream) [cm]
 *       - **rad_ext_downstream:** external downstream polycapillary radius (photons stream from upstream to downstream) [cm]
 *       - **rad_int_upstream:** internal upstream capillary radius (photons stream from upstream to downstream) [cm]
 *       - **rad_int_downstream:** internal downstream capillary radius (photons stream from upstream to downstream) [cm]
 *       - **focal_dist_upstream:** focal distance upstream of the polycapillary optic (photons stream from upstream to downstream) [cm]
 *       - **focal_dist_downstream:** focal distance downstream of the polycapillary optic (photons stream from upstream to downstream) [cm]
 *       - **returns:** a new \ref Profile, or \c NULL if an error occurred
 *
 * \subsection profiletype Profile type
 * 
 * Various optic shapes are allowed, including user-defined shapes. Three general external shapes are supported for straightforward external shape definition. In each case, the single capillary shape is assumed conical around the central capillary axis
 * 	- CONICAL: the external profile shape is a straight line between the polycapillary entrance and exit radii.
 *	- PARABOLOIDAL: a third degree polynomial is fit through the polycapillary entrance and exit radii, as well as the linear extrapolation on each side towards the focal distances.
 *	- ELLIPSOIDAL: an ellipse is described where the polycapillary side with largest radius has a horizontal tangent, whereas the tangent at the shortest radius side is directed towards the corresponding polycapillary focal distance.
 *
 * \section rng Rng
 * 
 * Class containing a random number generator
 * The \ref rng class is  mapped to either **gsl_rng** or **easy_rng**. When this struct is no longer required, it is the user's responsability to free the memory using ``Rng.__dealloc__``.
 *
 * Get a new rng with seed provided by caller:
 * Syntax: rng = Rng([seed=None])
 *       - **seed:** [OPTIONAL] a seed provided by the caller, if not provided one is generated for the user. ``Unsigned long int``
 *       - **returns:** a new \ref rng
 *
 * \section Description Description
 *
 * Class containing information about a polycapillary description such as shape and composition
 * When this class is no longer required, it is the user's responsability to free the memory using ``Description.__dealloc__``.
 * 
 * Create a new polycap_description by providing all its properties:
 * Syntax: description = Description(Profile profile, double sig_rough, int64_t n_cap, object composition, double density)
 *       - **profile:** \ref Profile containing outer polycapillary and single capillary shape coordinates
 *       - **sig_rough:** Surface rougness of the capillaries [Angstrom]
 *       - **n_cap:** The amount of capillaries in the hexagonally packed polycapillary optic
 *       - **composition:** capillary material composition XRayLib dictionary or string
 *       - **density:** Density of the capillary matrix [g/cm^{3}]
 *       - **returns:** a new \ref Description, or \c NULL if an error occurred	
 *
 * \section Source Source
 * 
 * Class containing information on the source from which photons can be (randomly) selected
 * When this struct is no longer required, it is the user's responsability to free the memory using ``Source.__dealloc__``.
 * 
 * Create a new Source class by providing all its properties:
 * Syntax: source = Source(Description description, double d_source, double src_x, double src_y, double src_sigx, double src_sigy, double src_shiftx, double src_shifty, object energies)
 *       - **description:** a \ref Description class
 *       - **d_source:** the distance between the source and polycapillary optic entrance window along the central axis [cm]
 *       - **src_x:** the source radius along the X (horizontal) direction [cm]
 *       - **src_y:** the source radius along the y (vertical) direction [cm]
 *       - **src_sigx:** the maximal divergence of photons along the X (horizontal) direction [rad]. Negative values in src_sigx or src_sigy represent homogeneous polycapillary optic illumination.
 *       - **src_sigy:** the maximal divergence of photons along the Y (vertical) direction [rad]. Negative values in src_sigx or src_sigy represent homogeneous polycapillary optic illumination.
 *       - **src_shiftx:** lateral shift of the source centre along the X (horizontal) direction with respect to the polycapillary optic central axis [cm]
 *       - **src_shifty:** lateral shift of the source centre along the Y (vertical) direction with respect to the polycapillary optic central axis [cm]
 *       - **hor_pol:** the polarisation factor of the simulated source (-1 <= hor_pol <= 1)
 *       - **energies:** an array containing the discrete energies of which the source will emit photons
 *       - **returns:** a new \ref Source, or \c NULL if an error occurred
 * 
 * \subsection src_phot get_photon
 * 
 * Create a new random polycap_photon based on \ref Source. In the event of an error, \c NULL is returned and \c error is set appropriately.
 * Syntax: photon = Source.get_photon(Rng rng)
 *       - **rng:** a \ref rng class, not None
 *   	 - **returns:** a new \ref Photon, or \c NULL if an error occurred
 * 
 * \subsection src_trans get_transmission_efficiencies
 *
 * Obtain the transmission efficiencies for a given array of energies, and a full \ref Description. Efficiencies are allocated by this function, and need to be freed with ``TransmissionEfficiencies.__dealloc__``.
 * Syntax: eff = Source.get_transmission_efficiencies(int max_threads, int n_photons[, bool leak_calc])
 *       - **max_threads:** the amount of threads to use. Set to -1 to use the maximum available amount of threads.
 *       - **n_photons:** the amount of photons to simulate that reach the polycapillary end
 *       - **leak_calc: [OPTIONAL] True: perform leak calculation; (default) False: do not perform leak calculation
 *       - **returns:** a new \ref TransmissionEfficiencies class, or \c NULL if an error occurred
 * 
 * \section Photon Photon
 * 
 * Class containing information about the simulated photon such as position and direction, energy and transmission weights.
 * When this class is no longer required, it is the user's responsability to free the memory using ``Photon.__dealloc__``.
 *
 * Create a new polycap_photon with its initial position, direction and electric field vector:
 * Syntax: photon = Photon(Description description, Rng rng, object start_coords, object start_direction, object start_electric_vector, [bool ignore])
 *       - **description:** a \ref Description class
 *       - **rng:** a random number generator pointer, \ref rng
 *       - **start_coords:** photon start coordinates array [x,y,z]
 *       - **start_direction:** photon start direction array [x,y,z]
 *       - **start_electric_vector:** photon start electric field vector array [x,y,z]
 *       - **ignore:** [OPTIONAL] if set to True, a \c NULL Photon will be generated. Default is False.
 *       - **returns:** a new \ref Photon, or \c NULL if an error occurred
 *
 * \subsection phot_launch launch
 *
 * Simulate a single photon trajectory for a given \ref Description. For each single photon the transmission efficiency for all energies is calculated. Weights memory is allocated by this function and should be freed by the user.
 * Syntax: weight = Photon.launch(object energies[, bool leak_calc])
 *       - **energies:** a double array containing the discrete energies for which the transmission efficiency will be calculated [keV]
 *       - **leak_calc:** True: perform leak calculation; (default) False: do not perform leak calculation
 *       - **returns:** weights array that will contain the transmission efficiency values as a function of photon energy
 * 
 * \subsection phot_coord get_exit_coords
 *
 * Retrieve exit coordinates from a \ref Photon class.
 * Syntax: coord = Photon.get_exit_coords()
 * 
 * \subsection phot_dir get_exit_direction
 *
 * Retrieve exit direction from a \ref Photon class.
 * Syntax: dir = Photon.get_exit_direction()
 * 
 * \subsection phot_elec get_exit_electric_vector
 *
 * Retrieve exit electric field vector from a \ref Photon class
 * Syntax: vect = Photon.get_exit_electric_vector()
 * 
 * \section TransmissionEfficiencies TransmissionEfficiencies
 * 
 * Class containing all output information such as simulated photon coordinates, direction, energies, weights, ...
 * When this class is no longer required, it is the user's responsability to free the memory using ``TransmissionEfficiencies.__dealloc__``.
 *
 * \subsection TE_write write_hdf5
 * 
 * Write \ref TransmissionEfficiencies data to a HDF5 file:
 * Syntax: TransmissionEfficiencies.write_hdf5(str filename)
 *       - **filename:** a HDF5 file new, not None
 *       - **returns:** true or false, or \c NULL if an error occurred
 *
 * \subsection TE_data data
 * 
 * Extract data from a polycap_transmission_efficiencies struct. returned arrays should be freed by the user.
 * Syntax: data = TransmissionEfficiencies.data() 
 *       - returns : tuple of (self.energies_np, self.efficiencies_np)
 * 
 * \page examples Examples
 * 
 * \tableofcontents
 *
 * \section examplec Example in C
 * \include example.c
 * \section examplepy Example in Python
 * \include example.py
 */

