/** \mainpage
 *
 * **easyRNG** is a simple library for C and Fortran providing access to several pseudo-random
 * number generators and pseudo-random number distributions.
 *
 * It doesn't include any implementations of generators or distributions, but is instead a thin wrapper
 * around the \c random templates of the C++ Standard Library that have been defined in the 2011 revision of the C++ standard.
 *
 * The API is modelled after the [GNU Scientific Library (GSL)](https://www.gnu.org/software/gsl/manual/html_node/index.html), and its Fortran bindings [FGSL](http://www.lrz.de/services/software/mathematik/gsl/fortran/).
 * Preliminary tests suggest that easyRNG's performance of its Mersenne Twister random number generators is only slightly worse than its GSL counterparts, but this stronly depends on which implementation of the C++ Standard Library was used.
 * 
 * The main reason to use this library over GSL or FGSL is its license. While GSL and FGSL are covered by the GNU General Public License version 3, easyRNG is available under the 3-clause BSD license, allowing for use in closed-source/commercial software packages.
 *
 * \author Tom Schoonjans
 *
 * \page installation_instructions Installation instructions
 *  
 * \section requirements Requirements
 * **easyRNG** can only be installed provided the following dependencies are
 * present on your system:
 * - A C++ compiler with full support of the C++11 standard. Compilers known to do the job are recent versions of GCC and clang.
 * - A C compiler (for running `make check`).
 * - Optional: a Fortran compiler with support of the 2003 standard. If not found then the Fortran bindings will not be built.
 * - Optional: GNU Scientific library. When present a test will be run benchmarking easyRNG's C API against GSL.
 * - Optional: Fortran bindings to the GNU Scientific library (FGSL). When present a test will be run benchmarking easyRNG's Fortran API against FGSL.
 *  
 * \section downloading Downloading the software
 * The source code release tarballs are hosted on the Github repository, in the [releases section](https://github.com/tschoonj/easyRNG/releases).
 * Just get the latest tarball and run the following commands:
 *
 *       tar xfvz easyRNG-x.y.tar.gz
 *       cd easyRNG-x.y
 *       ./configure
 *       make
 *       make check
 *       make install
 *
 *  This procedure is known to work on Linux, Mac OS X and Windows (using [msys2](https://msys2.github.io/))
 *  \subsection homebrew Homebrew                                                                                     
 *  Homebrew users can install easyRNG via my tap:
 *  
 *  > `brew install tschoonj/tap/easyrng`
 *
 *  \subsection linux Linux
 *  \subsubsection rhel Fedora, Centos and Scientific Linux
 *  To facilitate the installation on RPM based Linux distributions, the package includes a spec file which can be used to produce RPM packages for linux distributions that support them (Fedora, Red Hat etc). The developers have built 64-bit RPM packages of easyRNG for the officially supported Fedora and Redhat EL/CentOS/Scientific Linux 7 distributions. These can be downloaded from the RPM repository that is hosted by the X-ray Microspectroscopy and Imaging research group of Ghent University. Access to this repository can be obtained as follows for Fedora distros:
 *
 * > `su -c 'rpm -Uvh http://lvserver.ugent.be/yum/xmi-repo-key-fedora.noarch.rpm'`
 *
 * for Red Hat EL 7 based distributions:
 *
 * > `su -c 'rpm -Uvh http://lvserver.ugent.be/yum/xmi-repo-key-7.0-1.el7.noarch.rpm'`
 *
 * The easyRNG packages themselves can then be downloaded using yum (or \c dnf which is increasingly being used nowadays):
 *
 * > `su -c 'yum install easyRNG easyRNG-devel easyRNG-doc'`
 *
 * Updates can be installed in a similar way:
 *
 * > `su -c 'yum update easyRNG easyRNG-devel easyRNG-doc'`
 *
 * \subsubsection debian Debian and Ubuntu
 *
 * Packages were created for Debian and Ubuntu. Currently the following flavors are supported: Debian Jessie and Stretch, and several Ubuntu versions .
 * In order to access these packages using your favorite package manager, execute the following command to import my public key:
 *
 * > `curl http://xmi-apt.tomschoonjans.eu/xmi.packages.key | sudo apt-key add -`
 *
 * Next, add the package download location corresponding to your distribution to the /etc/apt/sources.list file (as root):
 *
 *
 * Debian Jessie:
 *
 *       deb http://xmi-apt.tomschoonjans.eu/debian jessie stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/debian jessie stable
 *
 * Debian Stretch:
 *
 *       deb http://xmi-apt.tomschoonjans.eu/debian stretch stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/debian stretch stable
 *
 * Ubuntu Trusty 14.04:
 *
 *       deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu trusty stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/ubuntu trusty stable
 *
 * Ubuntu Xenial 16.04:
 * 
 *       deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu xenial stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/ubuntu xenial stable
 *
 * Ubuntu Zesty 17.04:
 *
 *       deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu zesty stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/ubuntu zesty stable
 *
 * Ubuntu Artful 17.10:
 *
 *       deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu artful stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/ubuntu artful stable
 *
 * Ubuntu Bionic 18.04:
 *
 *       deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu bionic stable
 *       deb-src http://xmi-apt.tomschoonjans.eu/ubuntu bionic stable
 *
 * When the sources.list file contains the correct download locations, update the apt cache by running:
 *
 * > `sudo apt-get update`
 *
 * After this, one can install easyRNG by executing the following command:
 *
 * > `sudo apt-get install libeasyrng libeasyrng-dev libeasyrng-doc`
 *
 *  \subsection head Github repository
 *                                                                                                                    
 *  People interested in running the latest development version will have to clone the Github repository.             
 *  Make sure you have the above mentioned dependencies installed, as well as the GNU autotools (autoconf, automake and libtool).
 *
 *       git clone git@github.com:tschoonj/easyRNG.git                                                             
 *       cd easyRNG
 *       autoreconf -i
 *       ./configure
 *       make
 *       make check
 *       make install
 *
 * \page usage Usage
 * 
 * \section c_usage From C/C++/Objective-C
 *
 * Include the easyRNG headers in your code:
 * \code
 * #include <easy_rng.h> // for the random number generators
 * #include <easy_randist.h> // for the random number distributions
 * \endcode
 *
 * Assuming your program source file is called \c program.c, compile it with:
 * \code
 * gcc program.c -o program `pkg-config --cflags --libs easyRNG`
 * \endcode
 *
 * \section fortran_usage From Fortran
 *
 * The Fortran bindings' API is mostly identical to the C's. An important exception here is easy_ran_discrete_preproc(), which has one argument less than its C counterpart.
 * Include the easyRNG module in your code:
 * \code{.f90}
 * USE :: easyRNG
 * \endcode
 *
 * Assuming your program source file is called \c program.f90, compile it with:
 * \code
 * gfortran program.f90 -o program `pkg-config --cflags --libs easyRNG`
 * \endcode
 *
 * Make sure to use the exact same Fortran compiler to compile your program as was used to compile easyRNG!
 *
 * \page examples Examples
 * This page contains the code of the tests I have included to validate the program.
 * The code should be quite straightforward to understand. Comments have been added where deemed useful.
 *
 * \tableofcontents
 *
 * \section test1 Test 1: random number generator C API validation
 * \include test1.c
 * \section test2 Test 2: random number generator C API performance test
 * \include test2.c
 * \section test3 Test 3: random number distributions C API accuracy test
 * \include test3.c
 * \section test4 Test 4: random number generator Fortran API validation
 * \include test4.F90
 * \section test5 Test 5: random number generator Fortran API performance test
 * \include test5.F90
 * \section test6 Test 6: random number distributions Fortran API accuracy test
 * \include test6.F90
 */

