name: CI

on:
  #schedule:
  #  - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  EASYRNG_VERSION: 1.2
  XRAYLIB_VERSION: 4.1.3

jobs:

  visual-studio:
    timeout-minutes: 60
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        compiler:
          - cl
          - clang-cl
    name: Visual Studio with ${{matrix.compile}} and Python ${{matrix.python-version}}
    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        auto-update-conda: true
        channels: conda-forge
        python-version: ${{matrix.python-version}}
    - name: Install meson, numpy and cython
      run: |
        conda install -q -y meson numpy cython #TODO will have to optimise this, but just curious what will happen for now
    - name: Build with meson
      run: |
        meson setup meson-build
        meson compile -C meson-build
        meson test -C meson-build
      env:
        CC: ${{matrix.compiler}}
        CXX: ${{matrix.compiler}}

  msys2:
    timeout-minutes: 60
    strategy:
      matrix:
        cc:
          - clang
          - gcc
        buildsystem:
          - meson
        rng:
          - easyRNG
          - gsl
        include:
          - cc: clang
            cxx: clang++
          - cc: gcc
            cxx: g++
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          base-devel
          git
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-openmp
          mingw-w64-x86_64-lld
          mingw-w64-x86_64-hdf5
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-gsl
          mingw-w64-x86_64-cython
          mingw-w64-x86_64-python3-numpy
          make
          patch
    - uses: actions/checkout@v2
    - name: Install xraylib
      run: |
        set -ex
        curl -OLs https://xraylib.tomschoonjans.eu/xraylib-${XRAYLIB_VERSION}.tar.gz
        tar xvfz xraylib-${XRAYLIB_VERSION}.tar.gz
        cd xraylib-${XRAYLIB_VERSION}
        ./configure
        make
        make install
        set +ex
      env:
        CC: gcc
        CFLAGS: " -Wno-error=deprecated-declarations "
    - name: Install easyrng
      if: matrix.rng == 'easyRNG'
      run: |
        set -ex
        curl -OLs https://github.com/tschoonj/easyRNG/releases/download/easyRNG-${EASYRNG_VERSION}/easyRNG-${EASYRNG_VERSION}.tar.gz
        tar xvfz easyRNG-${EASYRNG_VERSION}.tar.gz
        cd easyRNG-${EASYRNG_VERSION}
        ./configure
        make
        make install
        set +ex
      env:
        CC: gcc
        CXX: g++
    - name: Build and test with Meson
      run: |
        set -ex
        mkdir build-tmp
        cd build-tmp
        meson --buildtype=debugoptimized -Dpython=python3 -Dbuild-documentation=false ..
        meson compile
        meson test
        set +ex
      env:
        CC: ${{matrix.cc}}

  unix:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rng: [easyRNG, gsl]
        compiler: [clang, gcc]
        buildsystem: [meson]
        include:
          # Linux
          - os: ubuntu-latest
            rng: easyRNG
            compiler: clang
            cc: clang
            extra: libeasyrng-dev
            python: /usr/bin/python3
          - os: ubuntu-latest
            rng: easyRNG
            compiler: gcc
            cc: gcc
            extra: libeasyrng-dev
            python: /usr/bin/python3
          - os: ubuntu-latest
            rng: gsl
            compiler: clang
            cc: clang
            python: /usr/bin/python3
          - os: ubuntu-latest
            rng: gsl
            compiler: gcc
            cc: gcc
            python: /usr/bin/python3
          # macOS
          - os: macos-latest
            rng: easyRNG
            compiler: clang
            cc: /usr/local/opt/llvm/bin/clang
            extra: tschoonj/tap/easyrng
            python: /usr/local/bin/python3
            libs: -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib
          - os: macos-latest
            rng: easyRNG
            compiler: gcc
            cc: /usr/local/bin/gcc-10
            extra: tschoonj/tap/easyrng
            python: /usr/local/bin/python3
          - os: macos-latest
            rng: gsl
            compiler: clang
            cc: /usr/local/opt/llvm/bin/clang
            python: /usr/local/bin/python3
            libs: -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib
          - os: macos-latest
            rng: gsl
            compiler: gcc
            cc: /usr/local/bin/gcc-10
            python: /usr/local/bin/python3

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Install ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        set -ex
        sudo apt-get update
        # sudo apt-get upgrade -> takes very long!
        sudo apt-get install libgsl0-dev python3-pip python3-wheel python3-setuptools libhdf5-serial-dev hdf5-tools gcc python3-all-dev python3-numpy cython3 ${{ matrix.extra }}
        pip3 install meson
        curl -OLs https://github.com/tschoonj/easyRNG/releases/download/easyRNG-${EASYRNG_VERSION}/easyRNG-${EASYRNG_VERSION}.tar.gz
        tar xvfz easyRNG-${EASYRNG_VERSION}.tar.gz
        cd easyRNG-${EASYRNG_VERSION}
        meson compile -C builddir
        meson test - C builddir
        sudo meson install -C builddir
        curl -OLs https://xraylib.tomschoonjans.eu/xraylib-${XRAYLIB_VERSION}.tar.gz
        tar xvfz xraylib-${XRAYLIB_VERSION}.tar.gz
        cd xraylib-${XRAYLIB_VERSION}
        meson setup builddir --buildtype=release --prefix=<path-to-installation-dir>
        meson compile -C builddir
        meson test -C builddir
        sudo meson install -C builddir
        set +ex
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        set -ex
        rm -f /usr/local/bin/2to3
        brew uninstall -f bazel bazelisk
        brew update
        brew upgrade || true
        brew install hdf5 git curl wget pkg-config gsl numpy meson
        brew install ${{ matrix.extra }} tschoonj/tap/xraylib
        /usr/local/bin/pip3 install Cython
        set +ex
      env:
        HOMEBREW_CURL_RETRIES: 5
    - name: Primary build and test with meson
      run: |
        set -ex
        export PATH=${HOME}/.local/bin:${PATH}
        mkdir build
        cd build
        meson --buildtype=debugoptimized -Dbuild-python-bindings=false -Dbuild-documentation=false ..
        meson compile
        meson test || (cat meson-logs/testlog.txt && exit 1)
        meson compile --clean
        rm -rf *
        meson --buildtype=debugoptimized -Dpython=${{matrix.python}} -Dbuild-documentation=false ..
        meson compile
        meson dist
        set +ex
      env:
        CC: ${{matrix.cc}}
        LDFLAGS: ${{matrix.libs}}
        CPPFLAGS: -I/usr/local/opt/hdf5/include

